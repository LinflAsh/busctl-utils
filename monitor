#!/bin/bash

# 初始化参数值数组
declare -A match_param_values

function display_one_line {
    printf "%-20s  %-50s\n" "$1" "$2"
}

# Function to display usage information
function display_usage {
    echo "用于生成DBUS message的匹配规则,以在支持DBUS通信的系统中,筛选DBUS message"
    echo "用法: gwbusctl monitor [options]"
    echo "如果每提供任何Options,进入命令行交互模式."
    echo "Options:"
    echo "  -h, --help        展示帮助信息"
    echo ""
    echo "匹配规则:"
    display_one_line "参数"           "规则"
    echo "-"
    display_one_line "type"           "匹配 messages 类型."
    display_one_line "sender"         "匹配指定的 messages 发送者."
    display_one_line "destination"    "匹配指定的 messages 接受者."
    display_one_line "path"           "匹配发往指定 object(method_call) 或从指定 object 发出(signal) 的 messages."

    display_one_line "interface"      "匹配发往指定 interface(method_call) 或从指定 interface 发出的(signal) 的 messages."
    display_one_line ""               "如果一条 message header 中省去了 interface 字段, 该 message 将无法匹配任何包含了这条匹配规则的监听."

    display_one_line "member"         "匹配拥有指定的 method 或者 signal 的 messages."

    display_one_line "path_namespace" "匹配发往指定 object(method_call) 或从指定 object发出(signal) 的 messages."
    display_one_line ""               "相比较 path 参数, 还可以匹配指定路径的子路径. 例如, path_namespace='/com/example/foo' 可以匹配"
    display_one_line ""               "/com/example/foo 或者 /com/example/foo/bar, 但不能匹配 /com/example/foobar."
    display_one_line ""               "不能同时使用path和path_namespace一起作为匹配规则."

    display_one_line "arg[0,1,2...]"  "匹配 message body 参数序号、参数值符合条件的 messages. 只有STRING类型的参数才能以这种方式匹配."
    display_one_line ""               "参数匹配的一个例子是arg3='Foo'.只应接受0到63之间的参数索引."

    display_one_line "arg[0,1,2...]path" "兼容arg[0,1,2...]的功能."
    display_one_line ""               "此外,当匹配规则中给定的字符串或相应的message arg以"/"结尾并且是另一个的前缀时,也存在匹配."
    display_one_line ""               "例如:arg0path="/aa/bb/", 这将匹配到第一个参数为"/","aa/","/aa/bb/","/aa/bb/cc/"和"/aa/bb/cc"的messages."
    display_one_line ""               "它将不匹配第一个参数为"/aa/b","/aa"甚至"/aa/bb"的message."

    display_one_line "arg0namespace"  "匹配第一个参数为STRING类型, 并且参数值是指定 namespace 中的总线名称或接口名称的 message."
    display_one_line ""               "这主要用于观察一组相关总线的名称变更,而不是单个名称或所有名称更改."
    display_one_line ""               "例如,匹配规则 member="NameOwnerChanged",arg0namespace="com.example.backend1"匹配总线名称变更,"
    display_one_line ""               "例如com.example.backend1.foo、com.example.baackend1.foo.bar和com.example.bankend1本身."
}

function display_params_table {
    echo "---------------------------------------------------------------------"
    display_one_line "parameter name"      "optional value" 
    echo "---------------------------------------------------------------------"
    display_one_line "1/type"               "method_call, method_return, error, signal"
    display_one_line "2/sender"             "Unique or well-known bus name"
    display_one_line "3/destination"        "Unique or well-known bus name"
    display_one_line "4/path"               "Any valid object path"
    display_one_line "5/interface"          "Interface name"
    display_one_line "6/member"             "Any valid method or signal name"
    display_one_line "7/path_namespace"     "Any valid object path"
    display_one_line "8/arg[0,1,2...]"      "Any string"
    display_one_line "9/arg[0,1,2...]path"  "Any string"
    display_one_line "10/arg0namespace"     "Any string"
    echo "---------------------------------------------------------------------"
}

function select_params {
    display_params_table

    # 读取用户选择的参数
    read -ep "请选择要使用的参数序号,以逗号分隔(例如:1,3,5): " choice

    # 拆分选择的参数
    IFS=',' read -ra selected_params <<< "$choice"
}

function accept_type {
    until read -ep "请选择Message类型(1/method_call, 2/method_return, 3/error, 4/signal): " type &&
          case $type in
              1 | "method_call")      match_param_values[type]="method_call";;
              2 | "method_return")    match_param_values[type]="method_return";;
              3 | "error")            match_param_values[type]="error";;
              4 | "signal")           match_param_values[type]="signal";;
              *) echo "错误的Message类型,请重新输入."; false;;
          esac; do :;
    done
}

function accept_sender {
    read -ep "请输入Message的sender (例如: xyz.openbmc_project.Settings 或者 :1.250): " sender
    match_param_values[sender]="$sender"
}

function accept_destination {
    read -ep "请输入Message的destination (例如: xyz.openbmc_project.Settings 或者 :1.250): " destination
    match_param_values[destination]="$destination"
}

function accept_path {
    read -ep "请输入Message的path(例如: /xyz/openbmc_project/pcieconf): " path
    match_param_values[path]="$path"
}

function accept_interface {
    read -ep "请输入Message的interface (例如: org.freedesktop.DBus.Properties): " interface
    match_param_values[interface]="$interface"
}

function accept_member {
    echo "请输入Message的member"
    echo "    1/PropertiesChanged"
    echo "    2/NameOwnerChanged"
    echo "    3/InterfacesAdded"
    echo "    4/InterfacesRemoved"
    read -ep "或者其他自定义member: " member
    case $member in
    1 | "PropertiesChanged")    match_param_values[member]="PropertiesChanged";;
    2 | "NameOwnerChanged")     match_param_values[member]="NameOwnerChanged";;
    3 | "InterfacesAdded")      match_param_values[member]="InterfacesAdded";;
    4 | "InterfacesRemoved")    match_param_values[member]="InterfacesRemoved";;
    *)                          match_param_values[member]=$member;;
    esac
}

function accept_path_namespace {
    read -ep "请出入path_namespace: " path_namespace
    match_param_values[path_namespace]="$path_namespace"
}

function accept_arg {
    read -ep  "请输入需要监听的 message arg 索引,以逗号分隔(例如:1,3,5): " input_indexes

    # 将输入的参数索引以逗号分隔存储在数组中
    IFS=',' read -ra indexes <<< "$input_indexes"

    # 循环遍历每个索引,提示用户输入对应的参数值,并存储在args数组中
    for index in "${indexes[@]}"; do
        read -ep "请输入arg $index 的值(例如:arg)::" arg
        match_param_values[arg"$index"]="$arg"
    done
}

function accept_arg_path {
    read -ep  "请输入需要监听的 message arg path 索引,以逗号分隔(例如:1,3,5): " input_indexes

    # 将输入的参数索引以逗号分隔存储在数组中
    IFS=',' read -ra indexes <<< "$input_indexes"

    # 循环遍历每个索引,提示用户输入对应的参数值,并存储在args数组中
    for index in "${indexes[@]}"; do
        read -ep "请输入arg${index}path 的值(例如:/aa/bb/):" arg_path
        match_param_values[arg${index}path]="$arg_path"
    done
}

function accept_arg_namespace {
    read -ep "请输入namespace: " arg0namespace
    match_param_values[arg0namespace]="$arg0namespace"
}

function input_params {
    # 根据用户选择提示参数值和含义,并保存用户输入的参数值
    for param in "${selected_params[@]}"; do
        case $param in
            1) accept_type;;
            2) accept_sender;;
            3) accept_destination;;
            4) accept_path;;
            5) accept_interface;;
            6) accept_member;;
            7) accept_path_namespace;;
            8) accept_arg;;
            9) accept_arg_path;;
            10) accept_arg_namespace;;
            *) echo "无效的参数选择"; exit 1;;
        esac
    done

    echo "${match_param_values[type]}"
}

function construct_match {
    match=""
    echo "${match_param_values[type]}"
    for key in "${!match_param_values[@]}"; do
        match+="$key='${match_param_values[$key]}',"
    done
}

function start_monitor {
    echo "调用busctl monitor命令:"
    echo "busctl monitor --match=$match"
    busctl monitor --match="$match"
}

function handle_monitor {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        display_usage
        exit 0
    fi

    if [[ "$#" -gt 0 ]]; then
        echo "Error: Unexpected argument '$1'"
        display_usage
        exit 1
    fi

    select_params

    input_params

    construct_match

    start_monitor
}

function main {
    handle_monitor "$@"
}

main "$@"
